import fair_sharers 


def test_wrapping_behavior():
    values = [0, 0, 800, 1000]  # Größter Wert ist am letzten Index
    num_iterations = 1
    share = 0.1

    # Erwartetes Ergebnis: Verteilung durch Umlauf
    expected = [100, 0, 900, 800]

    # Funktion ausführen
    actual = fair_sharers(values, num_iterations, share)

    # Vergleich der Ergebnisse
    assert actual == expected, f"Fehler bei wrapping: {actual} != {expected}"


def test_distribution_logic():
    cases = [
        ([0, 1000, 800, 0], 1, 0.1, [100, 800, 900, 0]),
        ([0, 1000, 800, 0], 2, 0.1, [100, 890, 720, 90]),
    ]

    for values, iterations, share, expected in cases:
        actual = fair_sharers(values, iterations, share)
        assert actual == expected, f"Fehler bei Test mit {values}: {actual} != {expected}"

